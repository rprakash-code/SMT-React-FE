using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;

public class ActiveDirectoryUserService
{
    private readonly string _connectionString;

    public ActiveDirectoryUserService(string connectionString)
    {
        _connectionString = connectionString;
    }

    // Fetch users matching the search query
    public async Task<List<ActiveDirectoryUserDto>> GetUsersAsync(string searchQuery)
    {
        var users = new List<ActiveDirectoryUserDto>();

        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                await connection.OpenAsync();

                var query = @"
                    SELECT Name, Mail 
                    FROM ActiveDirectoryUsers
                    WHERE Name LIKE @SearchQuery OR Mail LIKE @SearchQuery";

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@SearchQuery", $"%{searchQuery}%");

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            users.Add(new ActiveDirectoryUserDto
                            {
                                Name = reader["Name"].ToString(),
                                Mail = reader["Mail"].ToString()
                            });
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching users: {ex.Message}");
            throw;
        }

        return users;
    }
}

// Data Transfer Object (DTO) for returning user data
public class ActiveDirectoryUserDto
{
    public string Name { get; set; }
    public string Mail { get; set; }
}







using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class ActiveDirectoryController : ControllerBase
{
    private readonly ActiveDirectoryUserService _userService;

    public ActiveDirectoryController(ActiveDirectoryUserService userService)
    {
        _userService = userService;
    }

    // Endpoint for autocomplete
    [HttpGet("autocomplete")]
    public async Task<IActionResult> GetAutocompleteSuggestions([FromQuery] string query)
    {
        if (string.IsNullOrWhiteSpace(query))
        {
            return BadRequest(new { Message = "Query parameter is required." });
        }

        try
        {
            var users = await _userService.GetUsersAsync(query);
            if (users == null || users.Count == 0)
            {
                return NotFound(new { Message = "No users found matching the query." });
            }

            return Ok(users);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error fetching autocomplete suggestions: {ex.Message}");
        }
    }
}
