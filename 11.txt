Clear-Host

$LogFileName = "Log_BaseReport_"+(Get-Date).tostring("yyyyMMddhhmmss")
Start-Transcript -Path C:\Automation\Team\Prakash\SMT\Log\$LogFileName.txt

Import-Module "C:\Automation\Common\Automation_Get_Password_Reference.ps1" -Force
Import-Module "C:\Automation\Common\SharePoint\SP_Graph_API_Common.ps1" -Force

$Error.clear()
#Prod
$sDomainName= "nngroup"
$SchedulerName = "IAM Software Package"
$Global:sBackGroundTable_ItemID = "";

$sClientId =  $acattr_Dev_ClientId
#$sClientIKey =  $acattr_Dev_ClientKey
$sClientIKey = fn_GetPasswordFromAzureKeyVault_WithDirectAPI -acattr_Batch_cAccountName "NA" -acattr_Batch_cAccountAPI $acattr_Dev_ClientKey_API -acattr_cEncryptType "0" -acattr_AppName $SchedulerName   # Client secret for AppSP 
$s_IAM_ReconciliationReport_ExecutionStatus =  "Started"

Write-host "IAM Reconcilliation Script - Started"

# API Endpoints
$IDN_Get_AccessToken_API = "https://nngroup.api.identitynow.com/oauth/token"
$IDN_Search_API = 'https://nngroup.api.identitynow.com/v3/search'

#variables
$gRolesCollections  = New-Object System.Collections.ArrayList 
$gRolesIdentities   = New-Object System.Collections.ArrayList


#Sharepoint Details
#$UploadSiteURl = $acattr_SPO_AutomationSiteURL
#$TodayDate =  (Get-Date).tostring("yyyyMMddhhmmss")
$TodayDate =  (Get-Date).tostring("yyyyMMddhhmmss")
$Excel_File_Name = "IAM_BaseReport_"+ $TodayDate + ".xlsx"
$Excel_OutPut_Path = "C:\Automation\Team\Prakash\SMT\Report\$Excel_File_Name"
$currYearMonth  = (Get-Date).tostring("yyyy/MM")

#$SPORootSiteURL = $acattr_SPO_RootSiteURL
$ServerName = "srpafinf0184.insim.biz" 

#Send Mail Variables
$MessageBody = @()
$SMTPServer = $acattr_SMTP_ServerName
$From = “Automation@nnlife.co.jp”
#$To = "prakash.rajendran@nnlife.co.jp"
$ToStackHolder = "prakash.rajendran@nnlife.co.jp"

#$ToStackHolder = "prakash.rajendran@nnlife.co.jp"
$CC = "prakash.rajendran@nnlife.co.jp"

$Subject = $null
$attach = @()

$SourceNames = 'INS-JP_AD_Groups' #'INS-JP_LSA','INS-JP_CSA','INS-JP_WSA','INS-JP_AD_Groups'

##################################################################################
function Get-AccessToken {

    # Personal access token of JamesC
    $postParams = @{
                     grant_type = "client_credentials"
                     client_id = $sClientId 
                     client_secret =$sClientIKey 
                   }

    $response = Invoke-RestMethod -Uri $IDN_Get_AccessToken_API -Method 'POST' -Body $postParams
    return $response.access_token
}
##################################################################################

Function Send-EmailNotification_StakeHolders($Body, $subject)
{
    $EmailBody = $Body
    TRY
    {
        Send-MailMessage -to $ToStackHolder -cc $CC -From $From -Subject $Subject -Body $EmailBody -smtpserver $SMTPServer -Port 25 -BodyAsHtml -Encoding UTF8
    }
        CATCH 
    {
        write-host -ForegroundColor White -BackgroundColor RED "Report Generation - FAILED"
        Exit
    }
}
 

###########################################################
#    Upload File to Sharepoint Online
###########################################################
 
Function Get_SecurityGroup_ManagerName_AD {
 Param(
        [Parameter(Mandatory=$true)][string]$p_EntitlementName
        )
Process{
try
{
       # $Onwer_Result =  Get-ADGroup $p_EntitlementName -Properties ManagedBy | % {Get-ADUser -Identity $_.managedBy} | select name
        $Onwer_Result = get-adgroup $p_EntitlementName -Server $ServerName -properties * | select-object extensionAttribute1
        $sPlit_Owner_Result = $Onwer_Result.extensionAttribute1  -split "," -replace "CN=", ""
        return $sPlit_Owner_Result[0] 
 }
 catch
    {
        Write-Host $Error
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 269 - Error in Report SMT - " + $TodayDate
         Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
    }
    
   }
}

Function Get_SecurityGroup_Members_AD {
 Param(
        [Parameter(Mandatory=$true)][string]$p_securityGroupName
        )
Process{
try{
         $sGroupMember_Result = Get-ADGroupMember -Server $ServerName -Identity $p_securityGroupName  
        return $sGroupMember_Result
    }
     catch
    {
        Write-Host $Error
          $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 291 - Error in Report SMT - " + $TodayDate
         Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
    }
    }
    
}

Function CompareRoleMembers {
Param (
[parameter(Mandatory=$false)][string]$p_RoleMembersfrom_AD,
[parameter(Mandatory=$false)][string]$p_RoleMembersfrom_Sailpoint
)
    $s_Compare_Result = $true
    $Spilt_RoleMembersfrom_AD = $p_RoleMembersfrom_AD -split ";"
    $Split_RoleMembersfrom_Sailpoint = $p_RoleMembersfrom_Sailpoint -split ";"
    $CompareResult = Compare-Object -ReferenceObject $Split_RoleMembersfrom_Sailpoint -DifferenceObject $Spilt_RoleMembersfrom_AD

$Split_RoleMembersfrom_Sailpoint | ForEach-Object {
    if ($Spilt_RoleMembersfrom_AD -notcontains $_) {
       # Write-Host "`$array2 not contains the `$array1 string [$_]"
      $s_Compare_Result = $false
    }
    #return $false
 }

return $CompareResult
}

Function Read_from_Search {
 Param(
        [Parameter(Mandatory=$true)][string]$p_offset_Search_AP,
        [Parameter(Mandatory=$true)][string]$p_Limit_Search_AP,
        [Parameter(Mandatory=$true)][string]$p_body

        )
Process{
    $headers = @{ 
        Authorization = $authValue
        Accept = "application/json"
        "Content-Type" = "application/json"
    }

    $IDNFilter =  "?offset=$p_offset_Search_AP&limit=$p_Limit_Search_AP"
    TRY {
       #  $sGetSearch_Results = Invoke-RestMethod -Uri $IDN_Search_API$IDNFilter -Method Post  -headers $headers
         $sGetSearch_Results = Invoke-RestMethod -Uri $IDN_Search_API$IDNFilter  -Method Post  -headers $headers -Body $p_body
 
    }
    CATCH 
    {
        write-host -ForegroundColor White -BackgroundColor RED "Read_Search FAILED"
 
        Write-Host $Error
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 347 - Error in Report SMT - " + $TodayDate
         Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
    }
        return $sGetSearch_Results     
    }
}


#Offset
$s_offset_Search_AP = 0

#Limit
$s_Limit_Search_AP = 50
function Get-AccessProfile-Search {
 Param(
        [Parameter(Mandatory=$true)][string]$p_Source_Name
      )

    $body_AP = @"
    {
    "indices": [
        "accessprofiles"
    ],
    "query": {
           "query": "source.name:\"$p_Source_Name)\""
    },
    "sort": [
        "name"
    ],
    "queryResultFilter": {
        "includes": [ 
          *
        ]
    }
}
"@

    try {
    $sAccessProfileCollections= New-Object System.Collections.ArrayList
       
     do {
        $sSearchResult_AP = Read_from_Search -p_offset_Search_AP $s_offset_Search_AP  -p_Limit_Search_AP $s_Limit_Search_AP -p_body $body_AP
        if($sSearchResult_AP.Count -gt 0)
        {
            $s_offset_Search_AP = ($s_offset_Search_AP)+50
              foreach ($accessProfileObj in $sSearchResult_AP) {
              try
              {
                $properties = @{
                        Name = $accessProfileObj.name
                        Id = $accessProfileObj.id
                        Description = $accessProfileObj.description
                        OwnerName  = $accessProfileObj.owner.name
                        Source = $accessProfileObj.source.name
                        Enabled  = $accessProfileObj.enabled
                        Requestable = $accessProfileObj.requestable
                        Created =   $accessProfileObj.created                         
                        Modified   = $accessProfileObj.modified              
                        Owner   = $accessProfileObj.owner                 
                        Entitlements   = $accessProfileObj.entitlements          
                        # AccessRequestConfig  = $accessProfileObj.accessRequestConfig    
                        #  RevocationRequestConfig  = $accessProfileObj.revocationRequestConfig
                        Segments   = $accessProfileObj.segments              

                        }
                $sAccessProfileCollections.add( (New-Object psobject -Property $properties)) | Out-Null
               }
              catch {
                 write-host -ForegroundColor White -BackgroundColor RED "forloop FAILED1"
                }
            }

          } 
        }
         while ($sSearchResult_AP.Count -gt 0)
            if($sSearchResult_AP.Count -eq 0 )
            {
              #"No Accessprofile"
              # Write-Host "No Accessprofile"
            }
            else
            {
             # Exit
            }
    }
    catch {
        write-host -ForegroundColor White -BackgroundColor RED "Search FAILED"
        Write-Host $Error
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 441 - Error in Report SMT - " + $TodayDate
         Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
    }
    return $sAccessProfileCollections
}

##################################################################################
########### Function to get the Role Members
##################################################################################
function Get-IDN-RoleMembers {
 Param(
        [Parameter(Mandatory=$true)][string]$p_offset_Search_RM,
        [Parameter(Mandatory=$true)][string]$p_Limit_Search_RM,
        [Parameter(Mandatory=$true)][string]$p_RO_Name,
        [Parameter(Mandatory=$true)][string]$p_RO_ID
      )
      $gRolesIdentities.Clear() 
    $headers = @{ 
        Authorization = $authValue
        Accept = "application/json"
        "Content-Type" = "application/json"
    }

$p_R_body = @"
    {
    "indices": [
        "identities"
    ],
    "query": {
        "query": "@access(id:\"$p_RO_ID\")"
    },
    "sort": [
        "name"
    ],
    "queryResultFilter": {
        "includes": [ 
       *
        ]
    }
}
"@
   $IDNFilterRM =  "?offset=$p_offset_Search_RM&limit=$p_Limit_Search_RM"
     TRY {
   $SailPoint_GetRoleMembers_API = Invoke-RestMethod $IDN_Search_API$IDNFilterRM -Method POST -Headers $headers -Body $p_R_body

   if($SailPoint_GetRoleMembers_API.Count -gt 0)
   {
    
   }
   #write-host $sRoeName ":" $sRoleID ":" "Success" 
    }
    CATCH {
        write-host $sRoeName ":" $sRoleID ":" "Failed"
        Write-Host $Error
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += "<b>Role Name : </b>" + $sRoeName+"<br>"
        $MessageBody += $Error
        $Subject = "Line No: 503 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
    Exit
    }
    

return $SailPoint_GetRoleMembers_API

}


function Get-Identities-Roles{
   Param(
        [Parameter(Mandatory=$true)][string]$p_User_Id_SP
        )
        $headers = @{ 
        Authorization = $authValue
        Accept = "application/json"
        "Content-Type" = "application/json"
    }

            $body_RI = @"
    {
    "indices": [
        "identities"
    ],
    "query": {
        "query": "id:\"$p_User_Id_SP\""
    },
    "sort": [
        "name"
    ],
    "queryResultFilter": {
        "includes": [ 
            "id",
            "name",
            "displayName",
            "firstName",
            "lastName",
            "attributes"
        ]
    }
}
"@
        TRY
        {
        $result = Invoke-RestMethod $IDN_Search_API -Method POST -Headers $headers -Body $body_RI
        return $result.attributes.corporateKey
        }
        CATCH {
          Write-Host $Error
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 563 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
        }
}
 

#Offset
$s_offset_Search_RO = 0

#Limit
$s_Limit_Search_RO = 250

$accessToken = Get-AccessToken
$authValue = "Bearer $accessToken"

function Get-Role-Search-By-APID
{
 Param(
        [Parameter(Mandatory=$true)][string]$p_Source_Name,
        [Parameter(Mandatory=$true)][string]$p_AP_ID,
        [Parameter(Mandatory=$true)][string]$IsRoleMembers,
        [Parameter(Mandatory=$false)][string]$p_EN_Name,
        [Parameter(Mandatory=$false)][string]$p_EN_ID,
        [Parameter(Mandatory=$false)][string]$p_AP_Owner_ID,
        [Parameter(Mandatory=$false)][string]$p_AP_Description,
        [Parameter(Mandatory=$false)][string]$p_AP_SegmentName,
        [Parameter(Mandatory=$false)][string]$p_AP_Name
      )

    $headers = @{ 
        Authorization = $authValue
        Accept = "application/json"
        "Content-Type" = "application/json"
    }

    $body_RO = @"
    {
    "indices": [
        "roles"
    ],
    "query": {
        "query": "accessProfiles.id:\"$p_AP_ID\""
    },
    "sort": [
        "name"
    ],
    "queryResultFilter": {
        "includes": [ 
            *
        ]
    }
}
"@

  try {
        $sSearchResult_RO = Invoke-RestMethod $IDN_Search_API -Method POST -Headers $headers -Body $body_RO
        #$sSearchResult_RO = Read_from_Search -p_offset_Search_AP $s_offset_Search_RO  -p_Limit_Search_AP $s_Limit_Search_RO -p_body $body_RO
        if($sSearchResult_RO.Count -gt 0)
        {
     
          #  $s_offset_Search_RO = ($s_offset_Search_RO)+50
              foreach ($roleObj in $sSearchResult_RO) {
              try            
               { 
                $sEntitlement_Error = "-"
                $sEntitlement_ErrorMessage = "-"    
                $sIDN_ErrorMessage  = "-" 
                $sAD_ErrorMessage  = "-"    
                        Write-Host $roleObj.description
                        if($roleObj.description -eq "[Software Role]UIPATH Studio Ver19.10.4")
                        {
                            write-host $roleObj.description
                        }

                         if($roleObj.description -eq "[Software Role]UIPATH StudioのユーザーモードアプリケーションVer20.10.2/User mode application of UIPATH Studio Ver20.10.2")
                        {
                            write-host $roleObj.description
                        }

                  if($roleObj.description.StartsWith("[Software Role]"))
                     {     
                            $sMembersCollections =  New-Object System.Collections.ArrayList
                            $s_SG_MembersCollections =  New-Object System.Collections.ArrayList
                            $sGetRole_Result =  New-Object System.Collections.ArrayList

                            do
                            {
                                  $pGetRole_Result =  Get-IDN-RoleMembers -p_RO_Name $roleObj.name -p_RO_ID $roleObj.id -p_offset_Search_RM $s_offset_Search_RO -p_Limit_Search_RM $s_Limit_Search_RO
                                    $properties=""
                                  foreach ($memObj in $pGetRole_Result){                           
                                        $properties = @{
                                             attributes_uid =  $memObj.attributes.uid
                                        }
                                  $sGetRole_Result.add( (New-Object psobject -Property $properties)) | Out-Null
                                  }
                                  $s_offset_Search_RO = ($s_offset_Search_RO)+250
                            }
                            while ($pGetRole_Result.Count -gt 0)
                            if($pGetRole_Result.Count -eq 0 )
                            {
                                # "No RoleMembers"
                               # Write-Host "No RoleMembers"
                            }
                            else
                            {
                                # Exit
                            }
                            $Members = @{
                            MembersCount = ($sGetRole_Result | Measure-Object).Count
                            }
                            $sMembersCollections.add( (New-Object psobject -Property $Members)) | Out-Null


                            $sAP_Multiples_Names = "";
                            $sAP_Multiples_Ids = "";

                            foreach($apObj in $roleObj.accessProfiles){

                            if($apObj.name -eq "GRBPAC-JP-ChatGPT")
                            {
                              #  Write-Host "GRBPAC-JP-ChatGPT"
                            }

                            if($apObj.id -eq $p_AP_ID)
                            {
                                 $sAP_Multiples_Names = $apObj.name
                                 $sAP_Multiples_Ids = $apObj.id
                            }
                            # if($sAP_Multiples_Names -eq "")
                            # {
                            #     $sAP_Multiples_Names = $apObj.name
                            #    $sAP_Multiples_Ids = $apObj.id
                            #}
                            #else
                            # {
                            #     $sAP_Multiples_Names =  $sAP_Multiples_Names + ";" +$apObj.name
                            #     $sAP_Multiples_Ids =  $sAP_Multiples_Ids + ";" +  $apObj.id
                            #}
                            }
                            if($sAP_Multiples_Names -eq "")
                            {
                                $sAP_Multiples_Names = $roleObj.accessProfiles.name
                                $sAP_Multiples_Ids = $roleObj.accessProfiles.id
                            }
                            
                            $is_Owner = $false
                            $Owner_Insim_From_AD =""
                            $Owner_Insim_From_SailPoint =""
                            $SecurityGroup_Member_AD =""

                            if($p_EN_Name.Length -gt 0)
                            {
                                try
                                {
                                    if($p_EN_Name -ne "error:no entitlement")
                                    {
                                     $Owner_Insim_From_AD =  Get_SecurityGroup_ManagerName_AD -p_EntitlementName $p_EN_Name
                                    }
                                }
                                catch
                                {
                                   $sEntitlement_Error = "Error_Getting_IDN_Membership"
                                   $sIDN_ErrorMessage  = "error:getting IDN membership"
                                }

                                try
                                {
                                if($p_EN_Name -ne "error:no entitlement")
                                    {
                                     $SecurityGroup_Member_AD =  Get_SecurityGroup_Members_AD -p_securityGroupName $p_EN_Name
                                 }
                                }
                                catch
                                {
                                   $sEntitlement_Error = "Error_Getting_AD_Membership"
                                   $sAD_ErrorMessage  = "error:getting AD membership"
                                }
                            }
                            else
                            {
                             #$SecurityGroup_Member_AD =  Get_SecurityGroup_Members_AD -p_securityGroupName $p_AP_Name
                               $sEntitlement_Error = "No_Entitlement_Name"
                               $sEntitlement_ErrorMessage  = "error:no entitlement"
                            }
                            $Owner_Insim_From_SailPoint = Get-Identities-Roles -p_User_Id_SP $p_AP_Owner_ID
                            $RoleOwner_Insim_From_SailPoint = Get-Identities-Roles -p_User_Id_SP $roleObj.owner.id

                            if($Owner_Insim_From_AD -eq $RoleOwner_Insim_From_SailPoint)
                            {
                                $is_Owner = $true
                            }
                            else
                            {
                             #  $DailyOwnershipReportArray = [System.Collections.ArrayList]@()
                             #  $TodayDate_DailyOwnership =  (Get-Date).tostring("yyyy/MM/dd")
                             #  $DailyOwnershipReportArray.Add($TodayDate_DailyOwnership) | Out-Null
                             #  $DailyOwnershipReportArray.Add($p_EN_Name) | Out-Null
                             #  $DailyOwnershipReportArray.Add($RoleOwner_Insim_From_SailPoint) | Out-Null 
                             #  $DailyOwnershipReportArray.Add($Owner_Insim_From_AD) | Out-Null

                             # Create_ListItem -p_ListName "Daily Ownership Comparison Report" -p_Values $DailyOwnershipReportArray -p_Type "DailyOwnershipComparisonReport"
                            }

                            if($sEntitlement_Error -eq "-")
                            {
                                    if($IsRoleMembers -eq $true)
                                {
                                  if(($sGetRole_Result | Measure-Object).Count -ge 0)
{
                                 # $mem_Email_Coll = ""
                                     $mem_Insim_Coll = ""
                                     $SG_Mem_Insim_Replace_Coll = ""
                                     $SG_Mem_Insim_Replace_Coll_WithoutReplace = ""

                                     $SG_Mem_Insim_Coll = ""

                                      foreach ($memObj in $sGetRole_Result){                           
                                            if($mem_Insim_Coll -eq "")
                                                {
                                                   # $mem_Email_Coll = $memObj.email
                                                  #  $mem_Insim_Coll = $memObj.attributes.uid
                                                  $mem_Insim_Coll = $memObj.attributes_uid

                                            }
                                            else
                                                {
                                                   # $mem_Email_Coll =  $mem_Email_Coll + ";" +$memObj.email
                                                  #   $mem_Insim_Coll =  $mem_Insim_Coll + ";" +$memObj.attributes.uid
                                                     $mem_Insim_Coll =  $mem_Insim_Coll + ";" +$memObj.attributes_uid

                                            }
                                         }
                                         $Members = @{
                                          #  DisplayName = $memObj.displayName
                                          #  Id  = $memObj.id
                                           # Email  =  $mem_Email_Coll
                                             InsimId=  $mem_Insim_Coll
                                          #  RoleAssignmentSource = $memObj.roleAssignmentSource
                                          }

                                          if($SecurityGroup_Member_AD -ne "")
                                          {
                                            foreach ($securityGroupMemObj in $SecurityGroup_Member_AD){
                                            $s_Security_Group_Replace = $securityGroupMemObj.name
                                            $s_Security_Group_WithoutReplace = $securityGroupMemObj.name
                                                if($SG_Mem_Insim_Coll -eq "")
                                                {
                                                        $SG_Mem_Insim_Coll = $securityGroupMemObj.name
                                                        #if(!$securityGroupMemObj.name.StartsWith("NPA") -and !$securityGroupMemObj.name.StartsWith("GRBPAC-JP"))
                                                        if((!$securityGroupMemObj.name.StartsWith("NPA")) -and (!$securityGroupMemObj.objectClass.StartsWith('group')))
                                                        {
                                                            if($p_Source_Name.EndsWith("LSA") -or $p_Source_Name.EndsWith("CSA")  -or $p_Source_Name.EndsWith("WSA"))
                                                            {
                                                             $SG_Mem_Insim_Replace_Coll =  $s_Security_Group_Replace -replace "LSA","" -replace "WSA","" -replace "CSA", ""
                                                             $SG_Mem_Insim_Replace_Coll_WithoutReplace = $s_Security_Group_WithoutReplace
                                                            }
                                                            else
                                                            {
                                                             $SG_Mem_Insim_Replace_Coll =  $s_Security_Group_Replace 
                                                             $SG_Mem_Insim_Replace_Coll_WithoutReplace = $s_Security_Group_WithoutReplace
                                                            }
                                                        }
                                                }
                                                else
                                                {
                                                     $SG_Mem_Insim_Coll =  $SG_Mem_Insim_Coll + ";" +$securityGroupMemObj.name
                                                     # if(!$securityGroupMemObj.name.StartsWith("NPA") -and !$securityGroupMemObj.name.StartsWith("GRBPAC-JP"))
                                                      if((!$securityGroupMemObj.name.StartsWith("NPA")) -and (!$securityGroupMemObj.objectClass.StartsWith('group')))
                                                      {
                                                        if($p_Source_Name.EndsWith("LSA") -or $p_Source_Name.EndsWith("CSA")  -or $p_Source_Name.EndsWith("WSA"))
                                                        {
                                                          $SG_Mem_Insim_Replace_Coll =  $SG_Mem_Insim_Replace_Coll + ";" + $s_Security_Group_Replace -replace "LSA","" -replace "WSA","" -replace "CSA", ""
                                                          $SG_Mem_Insim_Replace_Coll_WithoutReplace = $SG_Mem_Insim_Replace_Coll_WithoutReplace + ";" + $s_Security_Group_WithoutReplace
                                                        }
                                                        else
                                                        {
                                                            if ($SG_Mem_Insim_Replace_Coll -eq "") {
                                                                  $SG_Mem_Insim_Replace_Coll =   $s_Security_Group_Replace
                                                            }
                                                            else{
                                                                 $SG_Mem_Insim_Replace_Coll =  $SG_Mem_Insim_Replace_Coll + ";" + $s_Security_Group_Replace
                                                            }


                                                            if ($SG_Mem_Insim_Replace_Coll_WithoutReplace -eq "") {
                                                                  $SG_Mem_Insim_Replace_Coll_WithoutReplace =   $s_Security_Group_WithoutReplace
                                                            }
                                                            else{
                                                                  $SG_Mem_Insim_Replace_Coll_WithoutReplace =  $SG_Mem_Insim_Replace_Coll_WithoutReplace + ";" + $s_Security_Group_WithoutReplace
                                                            }

                                                            
                                                        }
                                                      }
                                                }
                                         }
                                                $SG_Members = @{
                                                 InsimId=  $SG_Mem_Insim_Coll
                                             }
                                          }
                                           $Is_RoleMember_CheckResult = CompareRoleMembers -p_RoleMembersfrom_AD $SG_Mem_Insim_Replace_Coll  -p_RoleMembersfrom_Sailpoint $mem_Insim_Coll      
                                          
                                           #####
                                                                         
                                          # $Is_RoleMember_CheckResult =
                                           $s_NotIn_AD =""
                                           $s_NotIn_Sailpoint =""
                                           $Is_RoleMember_Same = $false
                                             if($sMembersCollections[0].MembersCount -gt 0)
                                               {
                                                foreach ($s_Cmp_Result in $Is_RoleMember_CheckResult){
                                                       if($s_Cmp_Result.SideIndicator -eq "<=")
                                                       {
                                                            if($s_NotIn_AD -eq "")
                                                            {
                                                                   $s_NotIn_AD = $s_Cmp_Result.InputObject
                                                            }
                                                            else
                                                            {
                                                                $s_NotIn_AD =  $s_NotIn_AD + ";" +$s_Cmp_Result.InputObject
                                                            }
                                                   
                                                       }
                                                       elseif($s_Cmp_Result.SideIndicator -eq "=>")
                                                       {
                                                              $s_Append_AccountType = ""
                                                                if($p_Source_Name.EndsWith("LSA"))
                                                                {
                                                                    $s_Append_AccountType = "LSA"
                                                                }
                                                                elseif($p_Source_Name.EndsWith("CSA"))
                                                                {
                                                                    $s_Append_AccountType = "CSA"
                                                                }
                                                                elseif($p_Source_Name.EndsWith("WSA"))
                                                                {
                                                                    $s_Append_AccountType = "WSA"
                                                                }
                                                                if($s_NotIn_Sailpoint -eq "")
                                                                {
                                                                  #  $s_NotIn_Sailpoint = $s_Append_AccountType+$s_Cmp_Result.InputObject
                                                                     $s_Get_Actual_ID = $SG_Mem_Insim_Replace_Coll_WithoutReplace -split ";"
                                                                   if($s_Cmp_Result.InputObject.StartsWith("LSA"))
                                                                    {
                                                                         $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                         $s_NotIn_Sailpoint =    $n_Get_Actual_ID 
                                                                    }
                                                                    else
                                                                    {
                                                                        $n_mem_Insim_Coll = $mem_Insim_Coll -split ";"
                                                                        $f_mem_Insim_Coll = $n_mem_Insim_Coll | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                        if(($f_mem_Insim_Coll | Measure-Object).Count -gt 0)
                                                                        {
                                                                            $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Append_AccountType+$s_Cmp_Result.InputObject}
                                                                            if(($n_Get_Actual_ID | Measure-Object).Count -gt 0)
                                                                            {
                                                                            $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                            $s_NotIn_Sailpoint =   $n_Get_Actual_ID 
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                           $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -match $s_Cmp_Result.InputObject} 
                                                                           $s_NotIn_Sailpoint =     $n_Get_Actual_ID 
                                                                        }
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                  #  $s_NotIn_Sailpoint =  $s_NotIn_Sailpoint + ";" +$s_Append_AccountType+$s_Cmp_Result.InputObject
                                                                    $s_Get_Actual_ID = $SG_Mem_Insim_Replace_Coll_WithoutReplace -split ";"
                                                                   if($s_Cmp_Result.InputObject.StartsWith("LSA"))
                                                                    {
                                                                         $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                         $s_NotIn_Sailpoint =  $s_NotIn_Sailpoint + ";" +  $n_Get_Actual_ID 
                                                                    }
                                                                    else
                                                                    {
                                                                        $n_mem_Insim_Coll = $mem_Insim_Coll -split ";"
                                                                        $f_mem_Insim_Coll = $n_mem_Insim_Coll | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                        if(($f_mem_Insim_Coll | Measure-Object).Count -gt 0)
                                                                        {
                                                                          $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Append_AccountType+$s_Cmp_Result.InputObject}

                                                                            if(($n_Get_Actual_ID | Measure-Object).Count -gt 0)
                                                                            {
                                                                                $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -eq $s_Cmp_Result.InputObject} 
                                                                                $s_NotIn_Sailpoint =  $s_NotIn_Sailpoint + ";" +  $n_Get_Actual_ID 
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                           $n_Get_Actual_ID = $s_Get_Actual_ID | Where-Object {$_ -match $s_Cmp_Result.InputObject} 
                                                                           $s_NotIn_Sailpoint =  $s_NotIn_Sailpoint + ";" +  $n_Get_Actual_ID 
                                                                        }
                                                                    }
                                                                }
                                                       }
                                                   }
                                               }
                                               else
                                               {
                                                $s_NotIn_Sailpoint = $SG_Mem_Insim_Replace_Coll_WithoutReplace -join ";"
                                               }
                                               if($s_NotIn_AD -eq "" -and   $s_NotIn_Sailpoint -eq "")
                                               {
                                                    $Is_RoleMember_Same = $true
                                               }
                                               else
                                               {
                                                #$Split_s_NotIn_Sailpoint = $s_NotIn_Sailpoint -split ";"
                                                #$Split_s_NotIn_Sailpoint | ForEach-Object {
                                                #$Split_s_NotIn_Sailpoint_Text =$_
                                                    #    $get_AD_fromLists =  $ADUsers | Where-Object{(  $_.SamAccountName  -eq $Split_s_NotIn_Sailpoint_Text) -or (  $_.SamAccountName  -eq ($Split_s_NotIn_Sailpoint_Text -replace "LSA", "")  -or  $_.SamAccountName  -eq ($Split_s_NotIn_Sailpoint_Text -replace "CSA", "")  -or   $_.SamAccountName  -eq ($Split_s_NotIn_Sailpoint_Text -replace "WSA", ""))}
                                                    #    $UserUsageReportArray = [System.Collections.ArrayList]@()
                                                    #    $TodayDate_User =  (Get-Date).tostring("yyyy/MM/dd")
                                                    #    $UserUsageReportArray.Add($TodayDate_User) | Out-Null
                                                    #    $UserUsageReportArray.Add($get_AD_fromLists.Description) | Out-Null
                                                    #    $UserUsageReportArray.Add($Split_s_NotIn_Sailpoint_Text) | Out-Null
                                                    #    $UserUsageReportArray.Add($roleObj.name) | Out-Null
                                                    #    $UserUsageReportArray.Add($p_EN_Name) | Out-Null
                                                    #    Create_ListItem -p_ListName "Daily IDN Usage Report" -p_Values $UserUsageReportArray -p_Type "DailyIDNUsageReport"
                                                   #}
                                               }
                                             
                                            $s_SG_MembersCollections.add( (New-Object psobject -Property $SG_Members)) | Out-Null
                                            $sMembersCollections.add( (New-Object psobject -Property $Members)) | Out-Null
                                   }
                                    else
                                    {
                                        $Members = "0"
                                    }
                                } 
                            }
                            else
                            {
                                $sMembersCollections = $sIDN_ErrorMessage
                                $s_SG_MembersCollections =    $sAD_ErrorMessage
                                $p_EN_Name =  $sEntitlement_ErrorMessage
                                $p_EN_ID = "-"
                                $Owner_Insim_From_AD="-"
                                $Owner_Insim_From_SailPoint="-"
                                $is_Owner="-"
                                $Is_RoleMember_Same="Error"
                                $s_NotIn_AD="-"
                                $s_NotIn_Sailpoint="-"

                                $MessageBody = "Dear Team,<br><br> Issue in IAM Base Report<br><br>"
                                $MessageBody += "<b>Error Message : </b>" + $sEntitlement_ErrorMessage+"<br>"
                                $MessageBody += "<b>Role Name : </b>" + $roleObj.name+"<br>"
                                $MessageBody += "<b>Access Profile Name : </b>" + $sAP_Multiples_Names+"<br>"

                                $Subject = "Line No: 1067 - Error in Report SMT - " + $TodayDate
                                Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
                            }

                               $properties = @{
                                        Name = $roleObj.name
                                        OwnerName  = $roleObj.owner.name
                                        RoleOwnerInsimID  =  $RoleOwner_Insim_From_SailPoint
                                        Id  = $roleObj.id
                                        Enabled  = $roleObj.enabled
                                        Requestable = $roleObj.requestable
                                        RoleMembersFromSailPoint = $sMembersCollections
                                        RoleMembersFromAD =  $s_SG_MembersCollections
                                        AccessProfiles=  $roleObj.accessProfiles
                                        AccessProfile_Name =  $sAP_Multiples_Names
                                        AccessProfile_ID =  $sAP_Multiples_Ids
                                        AccessProfile_Description=  $p_AP_Description
                                        AccessProfile_SegmentName=  $p_AP_SegmentName
                                        Entitlement_Name =  $p_EN_Name
                                        Entitlement_ID =  $p_EN_ID
                                        Created                 =  $roleObj.created
                                        Modified                =  $roleObj.modified
                                        Description             =  $roleObj.description
                                        OwnerNameFromAD                   =   $Owner_Insim_From_AD
                                        OwnerNameFromSP                   =   $Owner_Insim_From_SailPoint
                                        IsOwnerMatch = $is_Owner
                                        IsRoleMemberMatch =$Is_RoleMember_Same
                                        MemberListsNotinAD = $s_NotIn_AD
                                        MemberListsNotinSailPoint = $s_NotIn_Sailpoint.Trim(';')
                                        # Mmbership               =  $roleObj.membership
                                        # LegacyMembershipInfo    =  $roleObj.legacyMembershipInfo
                                        # AccessRequestConfig     =  $roleObj.accessRequestConfig
                                        # RevocationRequestConfig =  $roleObj.revocationRequestConfig
                                        Segments                =  $roleObj.segments
                                }

                        $gRolesCollections.add((New-Object psobject -Property $properties)) | Out-Null
                      #  $SQLInsertQuery   =  fn_getInsertQuery  -sValues $properties -sSourceName $p_Source_Name -sReportType "IAMReport"
                       # fn_ExecuteInsertyQuery -SQLInsertQuery $SQLInsertQuery 
                }
               }
              catch {
                 write-host -ForegroundColor White -BackgroundColor RED "forloop FAILED"
                Write-Host $Error
                $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
                $MessageBody = "Dear Team,<br><br>  Error in Base Report <br>"
                $MessageBody += $Error
                $Subject = "Line No: 1067 - Error1 in Report SMT - " + $TodayDate
                Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject

                Exit
                }

            }
 
        } 
     
    }
    catch {
        write-host -ForegroundColor White -BackgroundColor RED "Search FAILED"
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 1083 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
    }

  #  $result | ConvertTo-Json
    #$result.Count

}

Function Get-IDN-Roles()
{
   Param(
        [Parameter(Mandatory=$true)][string]$pSourceName,
        [Parameter(Mandatory=$true)][string]$IsRoleMembers

        )
        TRY
        {
        $gRolesCollections.Clear()
         #  fn_ExecuteDeleteQuery Automation_IAM_ReconciliationReport
        $results_AccessProfile =  Get-AccessProfile-Search -p_Source_Name $pSourceName
         for ($i = $results_AccessProfile.Count -1; $i -ge 0; $i--) {
          # Write-Host  $results_AccessProfile[$i].id 
               #Get-Role-Search-By-APID -p_Source_Name $pSourceName -p_AP_ID  $results_AccessProfile[$i].id -IsRoleMembers $IsRoleMembers -p_EN_Name $results_AccessProfile[$i].Entitlements[0].name -p_EN_ID $results_AccessProfile[$i].Entitlements[0].id -p_AP_Owner_ID $results_AccessProfile[$i].Owner.id
       # if( $results_AccessProfile[$i].id -eq "2c9180847c1b8b4c017c2630c3ae0521")
        #     {
               Get-Role-Search-By-APID -p_Source_Name $pSourceName -p_AP_ID  $results_AccessProfile[$i].id -IsRoleMembers $IsRoleMembers -p_EN_Name $results_AccessProfile[$i].Entitlements[0].name -p_EN_ID $results_AccessProfile[$i].Entitlements[0].id -p_AP_Owner_ID $results_AccessProfile[$i].Owner.id -p_AP_Description $results_AccessProfile[$i].Description -p_AP_SegmentName $results_AccessProfile[$i].Segments[0].name -p_AP_Name $results_AccessProfile[$i].Name
         #     }
            }
        }
        CATCH {
            write-host "Get-IDN-Roles : Failed"
            Write-Host $Error
             $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 1119 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
            Exit

        }
    return $gRolesCollections
}

Try{
Get-ChildItem -Path "C:\Automation\Team\Prakash\SMT\Report\" -File | Remove-Item -InformationAction Ignore
#Get-ChildItem -Path "C:\Automation\IAM\BaseReport\Report\FullList\" -File | Remove-Item -InformationAction Ignore
}
 catch
 {
    #Send mail with error message
        #send emaillo
     $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 1138 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
        Exit
 }

Try
{
foreach ($sSourceName in $SourceNames)
{
Write-host  "IAM Reconcilliation Script - Source : " $sSourceName " Started"
    $sResponse_ReadRoles_Output = ""
    Write-Host $sResponse_ReadRoles_Output 
    $sResponse_ReadRoles_Output  = Get-IDN-Roles -pSourceName $sSourceName -IsRoleMembers $true 
    $sResponse_ReadRoles_Output  | Select-Object @{Name="SourceName";Expression={$sSourceName}},@{Name="RoleID";Expression={$_.Id}},@{Name="RoleName";Expression={$_.Name}},@{Name="RoleDescription";Expression={$_.Description}},@{Name="RoleOwnerName";Expression={$_.OwnerName}},@{Name="RoleOwnerInsimID";Expression={$_.RoleOwnerInsimID}},@{Name="RoleEnabled";Expression={$_.Enabled}},@{Name="AccessProfileId";Expression={$_.AccessProfile_ID}},@{Name="AccessProfileName";Expression={$_.AccessProfile_Name}},@{Name="AccessProfileDescription";Expression={$_.AccessProfile_Description}},@{Name="EntitlementName";Expression={$_.Entitlement_Name}},@{Name="EntitlementId";Expression={$_.Entitlement_ID}}, @{Name="RoleMembersFromSailPoint";Expression={$_.RoleMembersFromSailPoint[1].InsimId}}, @{Name="ADGroupMembership";Expression={$_.RoleMembersFromAD.InsimId}}, @{Name="AccessProfileOwners";Expression={$_.OwnerNameFromSP}}, @{Name="SecurityGroupOwners";Expression={$_.OwnerNameFromAD}}, @{Name="IsOwnerMatch";Expression={$_.IsOwnerMatch}}, @{Name="IsRoleMemberMatch";Expression={$_.IsRoleMemberMatch}}, @{Name="MembersADDtoAD";Expression={$_.MemberListsNotinAD}}, @{Name="MembersRemoveFromAD";Expression={$_.MemberListsNotinSailPoint}} ,@{Name="AccessProfileSegmentName";Expression={$_.AccessProfile_SegmentName}}     | Export-Excel $Excel_OutPut_Path  -WorksheetName "RC"  -Append 
    if($sSourceName -eq "INS-JP_AD_Groups")
    {
        if(($sResponse_ReadRoles_Output | Measure-Object).Count -ge 0)
        {
           # Create_ListItem -p_ListName $IdentityNowRolesInformation_ListName -p_ListId $IdentityNowRolesInformation_ListId -p_ValueS $sResponse_ReadRoles_Output -p_Type "RoleInformation" -p_SourceName $sSourceName
        }
        else
        {
           # write-host $sResponse_ReadRoles_Output
        }
    }
Write-host  "IAM Reconcilliation Script - Source : " $sSourceName " Completed"
}
#Move-Item -Path C:\Automation\IAM\BaseReport\Report\$Excel_File_Name -Destination "C:\Automation\IAM\BaseReport\Report\FullList\FullList.xlsx"
$s_IAM_ReconciliationReport_ExecutionStatus =  "Execution Completed"
 }
 catch
 {
    #Send mail with error message
        #send emaillo
        $s_IAM_ReconciliationReport_ExecutionStatus =  "Error"
        $MessageBody = "Dear Team,<br><br> Below is Details<br>"
        $MessageBody += $Error
        $Subject = "Line No: 1183 - Error in Report SMT - " + $TodayDate
        Send-EmailNotification_StakeHolders -body $MessageBody  -subject $Subject
 }

$gRolesCollections.Clear()
Stop-Transcript
