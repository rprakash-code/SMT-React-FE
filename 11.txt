export const msalConfig = {
  auth: {
    clientId: "your-client-id", // Your Azure AD App Registration Client ID
    authority: "https://login.microsoftonline.com/your-tenant-id", // Your Azure AD Tenant ID
    redirectUri: "http://localhost:3000", // The URL to redirect after login
  },
  cache: {
    cacheLocation: "sessionStorage", // Store token in sessionStorage
    storeAuthStateInCookie: false, // Set to true for IE11
  },
};

export const loginRequest = {
  scopes: ["User.Read"], // You only need the User.Read permission for this scenario
};



import React, { useEffect, useState } from "react";
import { PublicClientApplication } from "@azure/msal-browser";
import { msalConfig, loginRequest } from "./msalConfig";

const msalInstance = new PublicClientApplication(msalConfig);

const App: React.FC = () => {
  const [user, setUser] = useState<string | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  useEffect(() => {
    const checkAccount = () => {
      const accounts = msalInstance.getAllAccounts();
      if (accounts.length > 0) {
        setUser(accounts[0].username); // Set the username
      }
    };
    checkAccount();
  }, []);

  const login = async () => {
    try {
      const loginResponse = await msalInstance.loginPopup(loginRequest);
      const tokenResponse = await msalInstance.acquireTokenSilent(loginRequest);
      setAccessToken(tokenResponse.accessToken);
    } catch (error) {
      console.error("Login failed", error);
    }
  };

  const fetchUserData = async () => {
    if (accessToken) {
      const response = await fetch("http://localhost:5000/api/user", {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      const data = await response.json();
      console.log("User data:", data);
    }
  };

  return (
    <div>
      {!user ? (
        <button onClick={login}>Login</button>
      ) : (
        <div>
          <h1>Welcome {user}</h1>
          <button onClick={fetchUserData}>Fetch User Data</button>
        </div>
      )}
    </div>
  );
};

export default App;











using Microsoft.Identity.Web;
using Microsoft.Identity.Web.Resource;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers();

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection("AzureAd"));

builder.Services.AddMicrosoftGraph(builder.Configuration.GetSection("AzureAd"));

builder.Services.AddAuthorization(options =>
{
    options.FallbackPolicy = options.DefaultPolicy;
});

var app = builder.Build();

// Use authentication and authorization middleware
app.UseAuthentication();
app.UseAuthorization();

// Map the controllers to routes
app.MapControllers();

app.Run();






{
  "AzureAd": {
    "ClientId": "your-client-id",
    "TenantId": "your-tenant-id",
    "ClientSecret": "your-client-secret",
    "Authority": "https://login.microsoftonline.com/your-tenant-id"
  }
}





using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Graph;
using Microsoft.Identity.Web;
using System.Threading.Tasks;

[Authorize]
[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IGraphServiceClient _graphServiceClient;

    public UserController(IGraphServiceClient graphServiceClient)
    {
        _graphServiceClient = graphServiceClient;
    }

    [HttpGet]
    public async Task<IActionResult> GetUserDetails()
    {
        try
        {
            var user = await _graphServiceClient.Me.Request().GetAsync();
            return Ok(new { user.DisplayName, user.UserPrincipalName, user.Mail });
        }
        catch (Exception ex)
        {
            return BadRequest(new { Message = "Error fetching user details", Details = ex.Message });
        }
    }
}






builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowReactApp",
        policy => policy.WithOrigins("http://localhost:3000")
                        .AllowAnyHeader()
                        .AllowAnyMethod());
});

var app = builder.Build();

app.UseCors("AllowReactApp");




