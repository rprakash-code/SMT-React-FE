public class UserModel
{
    public string UserName { get; set; }
    public string DisplayName { get; set; }
    public string Email { get; set; }
}


DAL/ActiveDirectoryService.cs
using System.Collections.Generic;
using System.DirectoryServices;
using System.DirectoryServices.AccountManagement;

public class ActiveDirectoryService
{
    private readonly string _domain;
    private readonly string _username;
    private readonly string _password;

    public ActiveDirectoryService(string domain, string username, string password)
    {
        _domain = domain;
        _username = username;
        _password = password;
    }

    public List<UserModel> GetAllUsers()
    {
        var users = new List<UserModel>();

        using (var context = new PrincipalContext(ContextType.Domain, _domain, _username, _password))
        {
            using (var searcher = new PrincipalSearcher(new UserPrincipal(context)))
            {
                foreach (var result in searcher.FindAll())
                {
                    if (result is UserPrincipal userPrincipal)
                    {
                        users.Add(new UserModel
                        {
                            UserName = userPrincipal.SamAccountName,
                            DisplayName = userPrincipal.DisplayName,
                            Email = userPrincipal.EmailAddress
                        });
                    }
                }
            }
        }

        return users;
    }
}

controllers
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

[Route("api/[controller]")]
[ApiController]
public class ActiveDirectoryController : ControllerBase
{
    private readonly ActiveDirectoryService _adService;

    public ActiveDirectoryController(ActiveDirectoryService adService)
    {
        _adService = adService;
    }

    [HttpGet("users")]
    public ActionResult<List<UserModel>> GetAllUsers()
    {
        try
        {
            var users = _adService.GetAllUsers();
            return Ok(users);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Internal server error: {ex.Message}");
        }
    }
}

 // Inject ActiveDirectoryService with necessary credentials
        services.AddSingleton(new ActiveDirectoryService(
            domain: "yourdomain.com",
            username: "yourADusername",
            password: "yourADpassword"
        ));
