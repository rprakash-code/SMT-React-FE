using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

public interface IAdoNetService
{
    Task<int> ExecuteNonQueryAsync(string query, Dictionary<string, object> parameters = null);
    Task<object> ExecuteScalarAsync(string query, Dictionary<string, object> parameters = null);
    Task<DataTable> ExecuteQueryAsync(string query, Dictionary<string, object> parameters = null);
}



using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;

public class AdoNetService : IAdoNetService
{
    private readonly string _connectionString;
    private readonly ILogger<AdoNetService> _logger;

    public AdoNetService(IConfiguration configuration, ILogger<AdoNetService> logger)
    {
        _connectionString = configuration.GetConnectionString("DefaultConnection"); // Ensure this exists in appsettings.json
        _logger = logger;
    }

    public async Task<int> ExecuteNonQueryAsync(string query, Dictionary<string, object> parameters = null)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var command = new SqlCommand(query, connection))
            {
                AddParameters(command, parameters);
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    public async Task<object> ExecuteScalarAsync(string query, Dictionary<string, object> parameters = null)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var command = new SqlCommand(query, connection))
            {
                AddParameters(command, parameters);
                return await command.ExecuteScalarAsync();
            }
        }
    }

    public async Task<DataTable> ExecuteQueryAsync(string query, Dictionary<string, object> parameters = null)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            await connection.OpenAsync();
            using (var command = new SqlCommand(query, connection))
            {
                AddParameters(command, parameters);
                using (var adapter = new SqlDataAdapter(command))
                {
                    DataTable dataTable = new DataTable();
                    adapter.Fill(dataTable);
                    return dataTable;
                }
            }
        }
    }

    private void AddParameters(SqlCommand command, Dictionary<string, object> parameters)
    {
        if (parameters != null)
        {
            foreach (var param in parameters)
            {
                command.Parameters.AddWithValue(param.Key, param.Value ?? DBNull.Value);
            }
        }
    }
}







// âœ… Register AdoNetService as a Scoped Service
builder.Services.AddScoped<IAdoNetService, AdoNetService>();



using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

public class UserRepository
{
    private readonly IAdoNetService _adoNetService;

    public UserRepository(IAdoNetService adoNetService)
    {
        _adoNetService = adoNetService;
    }

    public async Task<int> AddUserAsync(string name, string email)
    {
        string query = "INSERT INTO Users (Name, Email) VALUES (@Name, @Email)";
        var parameters = new Dictionary<string, object>
        {
            { "@Name", name },
            { "@Email", email }
        };
        return await _adoNetService.ExecuteNonQueryAsync(query, parameters);
    }

    public async Task<DataTable> GetAllUsersAsync()
    {
        string query = "SELECT * FROM Users";
        return await _adoNetService.ExecuteQueryAsync(query);
    }
}







using Microsoft.AspNetCore.Mvc;
using System.Data;
using System.Threading.Tasks;

[Route("api/users")]
[ApiController]
public class UserController : ControllerBase
{
    private readonly UserRepository _userRepository;

    public UserController(UserRepository userRepository)
    {
        _userRepository = userRepository;
    }

    [HttpPost("add")]
    public async Task<IActionResult> AddUser(string name, string email)
    {
        int rowsAffected = await _userRepository.AddUserAsync(name, email);
        return Ok(new { message = "User added successfully", rowsAffected });
    }

    [HttpGet("all")]
    public async Task<IActionResult> GetAllUsers()
    {
        DataTable users = await _userRepository.GetAllUsersAsync();
        return Ok(users);
    }
}





 public async Task<List<ActiveDirectoryUserDto>> GetUsersAsync(string searchQuery)
 {
     var users = new List<ActiveDirectoryUserDto>();
     try
     {
         var query = $@"
            SELECT Description as DisplayName, Name as InsimID, Mail, UserPrincipalName as OnPremEmail  FROM {TableNames.Jidoka_ActiveDirectory_Users} WHERE lower(Description) LIKE @SearchQuery";
         var parameters = new Dictionary<string, object>();
         parameters.Add("@SearchQuery", $"%{searchQuery.ToLower()}%");

       using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;

public class UserRepository
{
    private readonly IAdoNetService _adoNetService;

    public UserRepository(IAdoNetService adoNetService)
    {
        _adoNetService = adoNetService;
    }

    public async Task<List<ActiveDirectoryUserDto>> GetUsersAsync(string searchQuery)
    {
        var users = new List<ActiveDirectoryUserDto>();

        try
        {
            string query = $@"
                SELECT Description AS DisplayName, 
                       Name AS InsimID, 
                       Mail, 
                       UserPrincipalName AS OnPremEmail  
                FROM {TableNames.Jidoka_ActiveDirectory_Users} 
                WHERE LOWER(Description) LIKE @SearchQuery";

            var parameters = new Dictionary<string, object>
            {
                { "@SearchQuery", $"%{searchQuery.ToLower()}%" }
            };

            DataTable dataTable = await _adoNetService.ExecuteQueryAsync(query, parameters);

            foreach (DataRow row in dataTable.Rows)
            {
                users.Add(new ActiveDirectoryUserDto
                {
                    Description = row["DisplayName"].ToString(),
                    Mail = row["Mail"].ToString(),
                    SamAccountName = row["InsimID"].ToString(),
                    UserPrincipalName = row["OnPremEmail"].ToString()
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        return users;
    }
}
