using Microsoft.Graph;
using Microsoft.Identity.Client;
using System.Net.Http.Headers;

public class GraphService
{
    private readonly string _clientId;
    private readonly string _clientSecret;
    private readonly string _tenantId;

    public GraphService(IConfiguration configuration)
    {
        _clientId = configuration["AzureAd:ClientId"];
        _clientSecret = configuration["AzureAd:ClientSecret"];
        _tenantId = configuration["AzureAd:TenantId"];
    }

    public async Task<User> GetUserDetailsAsync(string accessToken)
    {
        var graphClient = new GraphServiceClient(new DelegateAuthenticationProvider(
            requestMessage =>
            {
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
                return Task.CompletedTask;
            }));

        return await graphClient.Me.Request().GetAsync();
    }
}



using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Graph;
using System.IdentityModel.Tokens.Jwt;

[Route("api/auth")]
[ApiController]
public class AuthController : ControllerBase
{
    private readonly GraphService _graphService;

    public AuthController(GraphService graphService)
    {
        _graphService = graphService;
    }

    [Authorize]
    [HttpGet("me")]
    public async Task<IActionResult> GetUser()
    {
        var accessToken = HttpContext.Request.Headers["Authorization"].ToString().Replace("Bearer ", "");
        var user = await _graphService.GetUserDetailsAsync(accessToken);

        return Ok(new
        {
            user.DisplayName,
            user.Mail,
            user.UserPrincipalName
        });
    }
}





