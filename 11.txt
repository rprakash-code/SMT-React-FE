using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;

public class IAMService
{
    private readonly HttpClient _httpClient;

    public IAMService(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    // Get Access Token
    public async Task<string> GetAccessTokenAsync(string clientId, string clientSecret, string tokenEndpoint)
    {
        var requestBody = new Dictionary<string, string>
        {
            { "grant_type", "client_credentials" },
            { "client_id", clientId },
            { "client_secret", clientSecret }
        };

        var request = new HttpRequestMessage(HttpMethod.Post, tokenEndpoint)
        {
            Content = new FormUrlEncodedContent(requestBody)
        };

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var responseContent = await response.Content.ReadAsStringAsync();
        var tokenResponse = JsonSerializer.Deserialize<AccessTokenResponse>(responseContent);

        return tokenResponse?.AccessToken;
    }

    // Get Role Members
    public async Task<List<RoleMember>> GetIDNRoleMembersAsync(string offset, string limit, string roleName, string roleId, string clientId, string clientSecret, string tokenEndpoint)
    {
        var accessToken = await GetAccessTokenAsync(clientId, clientSecret, tokenEndpoint);

        var headers = new Dictionary<string, string>
        {
            { "Authorization", $"Bearer {accessToken}" },
            { "Accept", "application/json" },
            { "Content-Type", "application/json" }
        };

        var requestBody = new
        {
            indices = new[] { "identities" },
            query = new { query = $"@access(id:\"{roleId}\")" },
            sort = new[] { "name" },
            queryResultFilter = new { includes = new[] { "*" } }
        };

        var results = new List<RoleMember>();
        bool hasMoreData;
        do
        {
            var requestUri = $"https://your-api-url.com/search?offset={offset}&limit={limit}";
            var response = await PostApiAsync(requestUri, requestBody, headers);

            var currentResults = JsonSerializer.Deserialize<List<RoleMember>>(response);
            results.AddRange(currentResults);

            // Handle offset
            offset = (int.Parse(offset) + currentResults.Count).ToString();
            hasMoreData = currentResults.Count > 0;

        } while (hasMoreData);

        return results;
    }

    // Get Roles by Access Profile ID
    public async Task<List<Role>> GetRolesByAPIDAsync(string sourceName, string accessProfileId, string clientId, string clientSecret, string tokenEndpoint)
    {
        var accessToken = await GetAccessTokenAsync(clientId, clientSecret, tokenEndpoint);

        var headers = new Dictionary<string, string>
        {
            { "Authorization", $"Bearer {accessToken}" },
            { "Accept", "application/json" },
            { "Content-Type", "application/json" }
        };

        var requestBody = new
        {
            indices = new[] { "roles" },
            query = new { query = $"accessProfiles.id:\"{accessProfileId}\"" },
            sort = new[] { "name" },
            queryResultFilter = new { includes = new[] { "*" } }
        };

        var requestUri = "https://your-api-url.com/search";
        var response = await PostApiAsync(requestUri, requestBody, headers);

        return JsonSerializer.Deserialize<List<Role>>(response);
    }

    // Get Access Profiles
    public async Task<List<AccessProfile>> GetAccessProfilesAsync(string sourceName, string clientId, string clientSecret, string tokenEndpoint)
    {
        var accessToken = await GetAccessTokenAsync(clientId, clientSecret, tokenEndpoint);

        var headers = new Dictionary<string, string>
        {
            { "Authorization", $"Bearer {accessToken}" },
            { "Accept", "application/json" },
            { "Content-Type", "application/json" }
        };

        var requestBody = new
        {
            indices = new[] { "accessprofiles" },
            query = new { query = $"source.name:\"{sourceName}\"" },
            sort = new[] { "name" },
            queryResultFilter = new { includes = new[] { "*" } }
        };

        var results = new List<AccessProfile>();
        bool hasMoreData;
        int offset = 0;

        do
        {
            var requestUri = $"https://your-api-url.com/search?offset={offset}&limit=50";
            var response = await PostApiAsync(requestUri, requestBody, headers);

            var currentResults = JsonSerializer.Deserialize<List<AccessProfile>>(response);
            results.AddRange(currentResults);

            // Handle offset
            offset += currentResults.Count;
            hasMoreData = currentResults.Count > 0;

        } while (hasMoreData);

        return results;
    }

    private async Task<string> PostApiAsync(string url, object body, Dictionary<string, string> headers)
    {
        var request = new HttpRequestMessage(HttpMethod.Post, url)
        {
            Content = new StringContent(JsonSerializer.Serialize(body), Encoding.UTF8, "application/json")
        };

        foreach (var header in headers)
        {
            request.Headers.Add(header.Key, header.Value);
        }

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadAsStringAsync();
    }
}





Controller
[ApiController]
[Route("api/[controller]")]
public class IAMController : ControllerBase
{
    private readonly IAMService _iamService;

    public IAMController(IAMService iamService)
    {
        _iamService = iamService;
    }

    [HttpGet("GetRoleMembers")]
    public async Task<IActionResult> GetRoleMembers(
        [FromQuery] string offset,
        [FromQuery] string limit,
        [FromQuery] string roleName,
        [FromQuery] string roleId,
        [FromQuery] string clientId,
        [FromQuery] string clientSecret,
        [FromQuery] string tokenEndpoint)
    {
        try
        {
            var result = await _iamService.GetIDNRoleMembersAsync(offset, limit, roleName, roleId, clientId, clientSecret, tokenEndpoint);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { message = "An error occurred.", error = ex.Message });
        }
    }

    [HttpGet("GetRolesByAPID")]
    public async Task<IActionResult> GetRolesByAPID(
        [FromQuery] string sourceName,
        [FromQuery] string accessProfileId,
        [FromQuery] string clientId,
        [FromQuery] string clientSecret,
        [FromQuery] string tokenEndpoint)
    {
        try
        {
            var result = await _iamService.GetRolesByAPIDAsync(sourceName, accessProfileId, clientId, clientSecret, tokenEndpoint);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { message = "An error occurred.", error = ex.Message });
        }
    }

    [HttpGet("GetAccessProfiles")]
    public async Task<IActionResult> GetAccessProfiles(
        [FromQuery] string sourceName,
        [FromQuery] string clientId,
        [FromQuery] string clientSecret,
        [FromQuery] string tokenEndpoint)
    {
        try
        {
            var result = await _iamService.GetAccessProfilesAsync(sourceName, clientId, clientSecret, tokenEndpoint);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { message = "An error occurred.", error = ex.Message });
        }
    }
}




Models
public class RoleMember
{
    [JsonPropertyName("attributes_uid")]
    public string AttributesUid { get; set; }
}

public class Role
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
}

public class AccessProfile
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
}





builder.Services.AddHttpClient<IAMService>();



GET https://your-api.com/api/iam/GetRoleMembers?offset=0&limit=100&roleName=TestRole&roleId=12345&clientId=yourClientId&clientSecret=yourClientSecret&tokenEndpoint=https://your-token-url.com/oauth2/token
