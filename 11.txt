using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class KeyVaultApiService
{
    private readonly HttpClient _httpClient;
    private readonly AzureAuthService _authService;

    public KeyVaultApiService(AzureAuthService authService)
    {
        _authService = authService;
        _httpClient = new HttpClient();
    }

    // Update Secret
    public async Task<string> UpdateSecretAsync(string vaultUrl, string secretName, string newSecretValue)
    {
        var accessToken = await _authService.GetAccessTokenAsync();

        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var payload = new
        {
            value = newSecretValue
        };

        var requestContent = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Put, secretUrl);
        request.Content = requestContent;
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();
        return responseBody;
    }

    // Get Secret
    public async Task<string> GetSecretAsync(string vaultUrl, string secretName)
    {
        var accessToken = await _authService.GetAccessTokenAsync();

        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var request = new HttpRequestMessage(HttpMethod.Get, secretUrl);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();
        return responseBody;
    }

    // Create Secret
    public async Task<string> CreateSecretAsync(string vaultUrl, string secretName, string secretValue)
    {
        var accessToken = await _authService.GetAccessTokenAsync();

        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var payload = new
        {
            value = secretValue
        };

        var requestContent = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Put, secretUrl);
        request.Content = requestContent;
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();
        return responseBody;
    }
}



controller


[Route("api/[controller]")]
[ApiController]
public class VaultController : ControllerBase
{
    private readonly KeyVaultApiService _keyVaultApiService;
    private readonly string _vaultUrl;

    public VaultController(KeyVaultApiService keyVaultApiService, IConfiguration configuration)
    {
        _keyVaultApiService = keyVaultApiService;
        _vaultUrl = configuration["KeyVault:Url"];
    }

    [HttpGet("get-secret/{secretName}")]
    public async Task<IActionResult> GetSecret(string secretName)
    {
        try
        {
            var result = await _keyVaultApiService.GetSecretAsync(_vaultUrl, secretName);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error retrieving secret: {ex.Message}");
        }
    }

    [HttpPost("create-secret/{secretName}")]
    public async Task<IActionResult> CreateSecret(string secretName, [FromBody] string secretValue)
    {
        try
        {
            var result = await _keyVaultApiService.CreateSecretAsync(_vaultUrl, secretName, secretValue);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error creating secret: {ex.Message}");
        }
    }

    [HttpPut("update-secret/{secretName}")]
    public async Task<IActionResult> UpdateSecret(string secretName, [FromBody] string newSecretValue)
    {
        try
        {
            var result = await _keyVaultApiService.UpdateSecretAsync(_vaultUrl, secretName, newSecretValue);
            return Ok(result);
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error updating secret: {ex.Message}");
        }
    }
}


{
  "value": "MySecretValue",
  "id": "https://<your-vault-name>.vault.azure.net/secrets/MySecretName/abcdef123456"
}



{
  "value": "MyNewSecretValue",
  "id": "https://<your-vault-name>.vault.azure.net/secrets/MySecretName/abcdef123456"
}



{
  "value": "MyUpdatedSecretValue",
  "id": "https://<your-vault-name>.vault.azure.net/secrets/MySecretName/abcdef123456"
}





kevault service
using System;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using System.Threading.Tasks;

public class KeyVaultService
{
    private readonly SecretClient _secretClient;

    public KeyVaultService(string vaultUrl, string clientId, string clientSecret, string tenantId)
    {
        // Authenticate using ClientSecretCredential
        var credential = new ClientSecretCredential(tenantId, clientId, clientSecret);

        // Initialize the SecretClient with the Vault URL and credential
        _secretClient = new SecretClient(new Uri(vaultUrl), credential);
    }

    // Retrieve a secret
    public async Task<string> GetSecretAsync(string secretName)
    {
        try
        {
            KeyVaultSecret secret = await _secretClient.GetSecretAsync(secretName);
            return secret.Value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving secret: {ex.Message}");
            throw;
        }
    }

    // Create or update a secret
    public async Task<string> CreateOrUpdateSecretAsync(string secretName, string secretValue)
    {
        try
        {
            KeyVaultSecret secret = await _secretClient.SetSecretAsync(secretName, secretValue);
            return secret.Value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating or updating secret: {ex.Message}");
            throw;
        }
    }
}




var builder = WebApplication.CreateBuilder(args);

// Load Azure Key Vault configuration values
var vaultUrl = builder.Configuration["KeyVault:Url"];
var clientId = builder.Configuration["AzureAd:ClientId"];
var clientSecret = builder.Configuration["AzureAd:ClientSecret"];
var tenantId = builder.Configuration["AzureAd:TenantId"];

// Register KeyVaultService
builder.Services.AddSingleton(new KeyVaultService(vaultUrl, clientId, clientSecret, tenantId));

// Add controllers
builder.Services.AddControllers();

var app = builder.Build();
app.MapControllers();
app.Run();








[Route("api/[controller]")]
[ApiController]
public class VaultController : ControllerBase
{
    private readonly KeyVaultService _keyVaultService;

    public VaultController(KeyVaultService keyVaultService)
    {
        _keyVaultService = keyVaultService;
    }

    [HttpGet("get-secret/{secretName}")]
    public async Task<IActionResult> GetSecret(string secretName)
    {
        try
        {
            var secret = await _keyVaultService.GetSecretAsync(secretName);
            return Ok(new { Name = secretName, Value = secret });
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error retrieving secret: {ex.Message}");
        }
    }

    [HttpPost("create-secret/{secretName}")]
    public async Task<IActionResult> CreateOrUpdateSecret(string secretName, [FromBody] string secretValue)
    {
        try
        {
            var secret = await _keyVaultService.CreateOrUpdateSecretAsync(secretName, secretValue);
            return Ok(new { Name = secretName, Value = secret });
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error creating/updating secret: {ex.Message}");
        }
    }
}







{
  "AzureAd": {
    "ClientId": "your-client-id",
    "ClientSecret": "your-client-secret",
    "TenantId": "your-tenant-id"
  },
  "KeyVault": {
    "Url": "https://<your-key-vault-name>.vault.azure.net/"
  }
}



