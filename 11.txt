import React, { useState, useEffect } from 'react';
import '../../styles/softwarepackage/package.scss';

interface SoftwarePackageProps {
  selectedItem: string | null;
  handleSelectItem: (item: string) => void;
  isDarkMode: boolean;
}

interface Package {
  name: string;
  lastReviewDate: string;
  lorem: string;
}

const SoftwarePackage: React.FC<SoftwarePackageProps> = ({ selectedItem, handleSelectItem, isDarkMode }) => {
  const [packages, setPackages] = useState<Package[]>([]); // State for packages
  const [loading, setLoading] = useState<boolean>(true); // Loading state
  const [error, setError] = useState<string | null>(null); // Error state

  // Fetch packages from API
  useEffect(() => {
    const fetchPackages = async () => {
      try {
        const response = await fetch('/api/packages'); // Replace with your API endpoint
        if (!response.ok) {
          throw new Error('Failed to fetch packages');
        }
        const data: Package[] = await response.json();
        setPackages(data);
      } catch (err: any) {
        setError(err.message || 'Something went wrong');
      } finally {
        setLoading(false);
      }
    };

    fetchPackages();
  }, []);

  if (loading) {
    return <div className="loading">Loading packages...</div>;
  }

  if (error) {
    return <div className="error">Error: {error}</div>;
  }

  return (
    <div className={isDarkMode ? 'package-container dark-mode' : 'package-container'}>
      <div className="left-title">
        <h3>Client Software Package</h3>
      </div>
      <div className="software-package">
        {packages.map((pkg, index) => (
          <div
            key={index}
            className={`package-item card ${selectedItem === pkg.name ? 'selected' : ''}`}
            onClick={() => handleSelectItem(pkg.name)}
            style={{
              color: selectedItem === pkg.name ? 'white' : 'black',
            }}
          >
            <span className="package-number">{index + 1}. </span>
            <div className="package-details">
              <span className="package-name">{pkg.name}</span>
              <div className="details-row">
                <span className="review-date">Last Review Date: {pkg.lastReviewDate}</span>
                <span className="package-description">Lorem: {pkg.lorem}</span>
              </div>
            </div>
            <button className="go-to-cmdb-btn">
              <a href="#!" className="go-to-cmdb">Go to CMDB</a>
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default SoftwarePackage;
