using Microsoft.Graph;
using Microsoft.Identity.Client;
using System.Net.Http.Headers;

public class GraphService
{
    private readonly IConfiguration _config;
    private GraphServiceClient _graphClient;

    public GraphService(IConfiguration config)
    {
        _config = config;
        InitializeGraphClient();
    }

    private void InitializeGraphClient()
    {
        var confidentialClient = ConfidentialClientApplicationBuilder
            .Create(_config["AzureAd:ClientId"])
            .WithTenantId(_config["AzureAd:TenantId"])
            .WithClientSecret(_config["AzureAd:ClientSecret"])
            .Build();

        var authProvider = new DelegateAuthenticationProvider(async (requestMessage) =>
        {
            var result = await confidentialClient
                .AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" })
                .ExecuteAsync();

            requestMessage.Headers.Authorization = 
                new AuthenticationHeaderValue("Bearer", result.AccessToken);
        });

        _graphClient = new GraphServiceClient(authProvider);
    }

    public async Task<User> GetUserByEmailAsync(string email)
    {
        try
        {
            var user = await _graphClient.Users[email]
                .Request()
                .Select(u => new { u.Id, u.DisplayName, u.Mail, u.UserPrincipalName })
                .GetAsync();

            return user;
        }
        catch (ServiceException ex)
        {
            Console.WriteLine($"Graph API Error: {ex.Message}");
            return null;
        }
    }
}





using Microsoft.AspNetCore.Mvc;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly GraphService _graphService;

    public AuthController(GraphService graphService)
    {
        _graphService = graphService;
    }

    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        var user = await _graphService.GetUserByEmailAsync(request.Email);

        if (user != null)
        {
            return Ok(new
            {
                Id = user.Id,
                Name = user.DisplayName,
                Email = user.Mail ?? user.UserPrincipalName
            });
        }

        return NotFound("User not found in Azure AD.");
    }
}

public class LoginRequest
{
    public string Email { get; set; }
}






var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddSingleton<GraphService>();

var app = builder.Build();
app.UseRouting();
app.UseEndpoints(endpoints => endpoints.MapControllers());
app.Run();
