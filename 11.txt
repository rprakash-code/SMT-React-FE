using System;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;

public class KeyVaultService
{
    private readonly SecretClient _secretClient;

    public KeyVaultService(string keyVaultUrl)
    {
        // Authenticate using Managed Identity
        _secretClient = new SecretClient(new Uri(keyVaultUrl), new DefaultAzureCredential());
    }

    public string GetSecret(string secretName)
    {
        try
        {
            // Retrieve the secret from Azure Key Vault
            KeyVaultSecret secret = _secretClient.GetSecret(secretName);
            return secret.Value;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error retrieving secret: {ex.Message}");
            throw;
        }
    }
}




Model/SecretModel.cs
public class SecretModel
{
    public string Name { get; set; }
    public string Value { get; set; }
}

Controller/KeyVaultController.cs
using Microsoft.AspNetCore.Mvc;
using System;

[Route("api/[controller]")]
[ApiController]
public class KeyVaultController : ControllerBase
{
    private readonly KeyVaultService _keyVaultService;

    public KeyVaultController(KeyVaultService keyVaultService)
    {
        _keyVaultService = keyVaultService;
    }

    [HttpGet("secret/{secretName}")]
    public ActionResult<SecretModel> GetSecret(string secretName)
    {
        try
        {
            var secretValue = _keyVaultService.GetSecret(secretName);
            return Ok(new SecretModel { Name = secretName, Value = secretValue });
        }
        catch (Exception ex)
        {
            return StatusCode(500, $"Error retrieving secret: {ex.Message}");
        }
    }
}


Program..cs
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddControllers();

        // Add KeyVaultService with the Key Vault URL
        var keyVaultUrl = "https://<your-key-vault-name>.vault.azure.net/";
        services.AddSingleton(new KeyVaultService(keyVaultUrl));
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}


var builder = WebApplication.CreateBuilder(args);

// Add KeyVaultService
var keyVaultUrl = "https://<your-key-vault-name>.vault.azure.net/";
builder.Services.AddSingleton(new KeyVaultService(keyVaultUrl));

// Add controllers
builder.Services.AddControllers();

var app = builder.Build();
app.MapControllers();
app.Run();


var keyVaultUrl = builder.Configuration["KeyVault:Url"];
builder.Services.AddSingleton(new KeyVaultService(keyVaultUrl));


{
    "KeyVault": {
        "Url": "https://<your-key-vault-name>.vault.azure.net/"
    }
}
