using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.Authority = $"https://login.microsoftonline.com/{builder.Configuration["AzureAd:TenantId"]}";
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = $"https://sts.windows.net/{builder.Configuration["AzureAd:TenantId"]}/",
            ValidateAudience = true,
            ValidAudience = builder.Configuration["AzureAd:ClientId"],
            ValidateLifetime = true
        };
    });

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

var app = builder.Build();
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();
app.Run();



using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Graph;
using Microsoft.Identity.Client;
using System.Net.Http.Headers;

[Route("api/[controller]")]
[ApiController]
public class SSOController : ControllerBase
{
    private readonly IConfiguration _configuration;

    public SSOController(IConfiguration configuration)
    {
        _configuration = configuration;
    }

    [HttpGet("user")]
    [Authorize]
    public async Task<IActionResult> GetUserProfile()
    {
        var accessToken = Request.Headers["Authorization"].ToString().Replace("Bearer ", "");

        var client = new GraphServiceClient(
            new DelegateAuthenticationProvider(async (requestMessage) =>
            {
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            })
        );

        var user = await client.Me.Request().GetAsync();
        return Ok(new
        {
            user.DisplayName,
            user.Mail,
            user.UserPrincipalName
        });
    }
}
















export const msalConfig = {
    auth: {
        clientId: "YOUR_CLIENT_ID",
        authority: "https://login.microsoftonline.com/YOUR_TENANT_ID",
        redirectUri: "http://localhost:3000",
    },
    cache: {
        cacheLocation: "localStorage",
        storeAuthStateInCookie: false,
    }
};

export const loginRequest = {
    scopes: ["openid", "profile", "email", "User.Read"]
};



import React from "react";
import { MsalProvider, useMsal, useIsAuthenticated } from "@azure/msal-react";
import { PublicClientApplication, AuthenticationResult, AccountInfo } from "@azure/msal-browser";
import { msalConfig, loginRequest } from "./authConfig";
import axios from "axios";
import "./App.css";

// Initialize MSAL instance
const msalInstance = new PublicClientApplication(msalConfig);

// Login Component
const LoginButton: React.FC = () => {
    const { instance } = useMsal();

    const handleLogin = async () => {
        try {
            await instance.loginPopup(loginRequest);
        } catch (error) {
            console.error("Login Error:", error);
        }
    };

    return <button onClick={handleLogin}>Login with Azure SSO</button>;
};

// User Profile Component
const UserProfile: React.FC = () => {
    const { instance, accounts } = useMsal();
    const isAuthenticated = useIsAuthenticated();

    const getProfile = async () => {
        if (isAuthenticated && accounts.length > 0) {
            try {
                const account: AccountInfo = accounts[0];

                const response: AuthenticationResult = await instance.acquireTokenSilent({
                    ...loginRequest,
                    account,
                });

                const accessToken = response.accessToken;

                const apiResponse = await axios.get("https://localhost:5001/api/sso/user", {
                    headers: {
                        Authorization: `Bearer ${accessToken}`,
                    },
                });

                alert(`Welcome, ${apiResponse.data.displayName}`);
                console.log("User Profile:", apiResponse.data);
            } catch (error) {
                console.error("Profile Fetch Error:", error);
            }
        }
    };

    return isAuthenticated ? (
        <div>
            <button onClick={getProfile}>Get My Profile</button>
        </div>
    ) : null;
};

// App Component
const App: React.FC = () => {
    return (
        <MsalProvider instance={msalInstance}>
            <div className="App">
                <h1>Company SSO Login</h1>
                <LoginButton />
                <UserProfile />
            </div>
        </MsalProvider>
    );
};

export default App;



REACT_APP_CLIENT_ID=YOUR_CLIENT_ID
REACT_APP_TENANT_ID=YOUR_TENANT_ID
REACT_APP_API_URL=https://localhost:5001/api




const clientId = process.env.REACT_APP_CLIENT_ID!;
const tenantId = process.env.REACT_APP_TENANT_ID!;
const apiUrl = process.env.REACT_APP_API_URL!;

export const msalConfig = {
    auth: {
        clientId,
        authority: `https://login.microsoftonline.com/${tenantId}`,
        redirectUri: "http://localhost:3000",
    },
    cache: {
        cacheLocation: "localStorage",
        storeAuthStateInCookie: false,
    }
};

export const loginRequest = {
    scopes: ["openid", "profile", "email", "User.Read"]
};

export const API_URL = apiUrl;



