using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class KeyVaultApiService
{
    private readonly HttpClient _httpClient;
    private readonly AzureAuthService _authService;

    public KeyVaultApiService(AzureAuthService authService)
    {
        _authService = authService;
        _httpClient = new HttpClient();
    }

    // Update Secret
    public async Task<string> UpdateSecretAsync(string vaultUrl, string secretName, string newSecretValue)
    {
        var accessToken = await _authService.GetAccessTokenAsync();
        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var payload = new { value = newSecretValue };
        var requestContent = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Put, secretUrl)
        {
            Content = requestContent
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadAsStringAsync();
    }

    // Create Secret
    public async Task<string> CreateSecretAsync(string vaultUrl, string secretName, string secretValue)
    {
        var accessToken = await _authService.GetAccessTokenAsync();
        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var payload = new { value = secretValue };
        var requestContent = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage(HttpMethod.Put, secretUrl)
        {
            Content = requestContent
        };
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadAsStringAsync();
    }

    // Get Secret
    public async Task<string> GetSecretAsync(string vaultUrl, string secretName)
    {
        var accessToken = await _authService.GetAccessTokenAsync();
        var secretUrl = $"{vaultUrl}/secrets/{secretName}?api-version=7.2";

        var request = new HttpRequestMessage(HttpMethod.Get, secretUrl);
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var response = await _httpClient.SendAsync(request);
        response.EnsureSuccessStatusCode();

        return await response.Content.ReadAsStringAsync();
    }
}



